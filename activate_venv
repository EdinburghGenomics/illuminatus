#!/bin/bash

# Bootstrap a new VEnv in ./_illuminatus_venv suitable for running Illuminatus.
# This should probably be re-done as setup.py with proper deployment etc.
# Just now we're running Illuminatus off the default python3 but a custom VEnv
# seems much more sensible, for production and testing!

# After running this once in the workspace, I can do, eg.:
# ( cd ../genologics && python3 ./setup.py develop )
# and now I can tinker with the genologics code from my GIT checkout
# without impacting the system shared Python.

if [[ "$0" == "$BASH_SOURCE" ]] ; then
    echo "You need to source this file, not run it."
    exit 1
fi

activate_venv() {
    #We need to ensure -u is not set but then put the old value back.
    reset=`set +o | grep -w nounset` ; set +o nounset
    source ./_illuminatus_venv/bin/activate
    $reset
}

pip_install() {
    # Send all output to stdout
    pip3 --disable-pip-version-check install "$@" 2>&1
}

install_multiqc() {
    #Install/upgrade MultiQC from GIT
    #pip_install --upgrade --no-deps 'git+https://github.com/EdinburghGenomics/MultiQC.git#egg=multiqc'
    # For now, use the dev branch

    # For now we need specific older versions of these modules:
    pip_install 'networkx==1.11' 'spectra==0.0.8' 'colormath==2.1.1'

    for url in \
        'git+https://github.com/EdinburghGenomics/MultiQC.git@tim_branch#egg=multiqc' \
        'git+https://github.com/EdinburghGenomics/MultiQC_EdGen.git@master#egg=multiqc_edgen'
        do
        if [ "${1:-}" = 'upgrade' ] ; then
            pip_install --upgrade --no-deps "$url"
        else
            pip_install "$url"
        fi
    done

    # Quick check that it's (maybe) working:
    python -c "from multiqc.utils import config ; config.avail_modules['fastqc'].load()"
}

if [ -e ./_illuminatus_venv/bin/activate ] ; then

    activate_venv

    # MultiQc is under active development, so enable easy update
    if [ "${UPDATE_MULTIQC:-0}" != 0 ] ; then
        #pip_install --upgrade pip
        install_multiqc upgrade
    fi

else
    echo "Bootstrapping new VEnv from `which python3`"
    ( set -e ;
        python3 -mvenv ./_illuminatus_venv
        activate_venv

        pip_install pip==19.2.1
        pip_install pyyaml==5.1.1
        pip_install yamlloader==0.5.5
        pip_install Rt==1.0.11
        pip_install pyclarity_lims==0.4.8
        pip_install psycopg2-binary==2.8.3
        pip_install pystache==0.5.4

        # InterOP is now on PyPI so no pre-build needed :-)
        pip_install numpy==1.16.4
        pip_install interop==1.1.8

        # Needed if well_dups runs in the local VEnv, which it currently does.
        pip_install python-Levenshtein==0.12.0

        # My own MultiQC and MultiQC_EdGen. Pip installs directly from GIT so
        # why not? Assume the master branch is always good, since it's simpler than
        # searching for the last release tag (though that is possible).
        # see https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support
        install_multiqc
    )

    if [ $? = 0 ] ; then
        # We need this since we quit the subshell
        activate_venv
    else
        echo "Provisioning VEnv Failed!"
        false
    fi
fi
