These are some notes regarding the re-jigging of the count_barcodes_in_unassigned_reads3.pl
script.

Ultimately, this will be a complete re-write of the code as part of Illuminatus and it
will:

- Be re-written from scratch in Python
- With unit tests!!
- Produce a report that gets integrated into the MultiQC reports - probably by spitting
  out a bunch of YAML stuff (or into a database?)
- Look for likely reverse complement errors based upon the expected barcodes from the
  sample sheet
- Review the way the whole thing is calculated - the algorithm is unsatisfactory.
- Use the LIMS as a source of info on 'known' barcodes, possibly caching the list

For now, I'm interested in just doing 6, preferably without the cache as that gets us
into NFS file locking issues.

But if I did want a cache?
http://www.grantjenks.com/docs/diskcache/tutorial.html - not good for NFS

I think we need to use a basic cache, protected by a flufl.lock to deal with NFS,
but given our 100-second NFS lag there may be no reasonable way to do this.

Anyway, for now - firstly a query to get the barcodes from the LIMS:

select name from reagentlabel where name like '%(%)' order by lastmodifieddate desc

this one adds the last artifact to be associated with the barcode:

select distinct on (lastmodifieddate, labelid, name) rl.labelid, rl.name, alm.artifactid from reagentlabel rl inner join artifact_label_map alm on rl.labelid = alm.labelid where name like '%(%)' order by lastmodifieddate desc limit 10;

this finds the project associated with that artifact. We would expect there is only one but just be sure, return max(p.name).

select max(p.name) from artifact a inner join artifact_sample_map asm on a.artifactid = asm.artifactid inner join sample s on asm.processid = s.processid inner join project p on s.projectid = p.projectid  where a.artifactid = 44478;

But where do the actual barcodes live? I can't find them? Desperate times, desperate measures...

pg_dump ...
grep ...

Nope, still not clear at all. For now I'll just get the code from the name and leave it at that. Much simpler:

select distinct on (barcode, lastmodifieddate) rl.name, substring(rl.name from '.*\((.*)\)')
as barcode from reagentlabel rl where name like '%(%)' order by lastmodifieddate desc;

...No, no, no. This isn't right at all. The distinct on 'lastmodifieddate' means that we see barcodes more than once.

select distinct on (barcode) rl.name, substring(rl.name from '.*\((.*)\)')
as barcode from reagentlabel rl where name like '%(%)' order by barcode, lastmodifieddate desc;

...Much better!

Now, can Perl connect to the database or do I need more modules? Nope, it's fine (tested on headnode and worker node).
