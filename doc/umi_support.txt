Here's the PLN for this. Before we even get any data I'm going to pretend that a test run has UMI's and
see what happens.

I did this with 180815_M05898_0016_000000000-BTR5T, pretending that the last 4 bases of the i7 were a
UMI. I added a pipeline_settings.ini as follows:

[bcl2fastq]
--tiles: s_[$LANE]_1101
--barcode-mismatches: 1
--use-bases-mask: Y250n,I4Y4,I8,Y250n
--mask-short-adapter-reads: 1

The last line is needed or else all the bases just come out as N, but with this it works as we hoped
and we get these extra short FASTQ files.

Illuminatus QC will fail to make a MultiQC report because read 2 is the UMI and read 3 is the actual
read2. Failure here is expected. I think this can be easily addressed by changing the logic in
Snakefile.qc, especially if the read 2 is renamed to U or whatever.

Note that the .count and .md5sum files are being made already which is good.

I've had to modify BCL2FASTQCleanup.py to remove the extra files properly (just made the regex more
liberal). Change this again if we decide to use something other than 'u' ('U', 'I', ???)
Yes, I decided to use "_UMI".

Richard remarked we probably want add UMI's on the start of read2 rather than the end of index1. I
had a tinker and if you fudge the RunInfo.xml you can split read2 and end up with two separate FASTQ
files for the two parts. This is something we could do, and then all the downstream logic would
be as for the index1 UMI's. Note it may actually be possible to define the two cycles on the machine?
In that case we wouldn't need to munge RunInfo.xml and in fact we could infer that the extra read was
a UMI.

I'll check with Tony when the time comes.

I've gone ahead and added support for renaming read2 to 'UMI' when a UMI is detected. Let's see if this
is what we actually need. Fixing the QC should be simple(ish). Did this too.

--

So the project that first made use of this was 11742, sequenced on a single run 190528_A00291_0161_AHCHCLDRXX.

Note I needed to add the following settings. The second is important or all the UMIs turn to Ns!:

==> /lustre/home/tbooth2/test_seqdata/190528_A00291_0161_AHCHCLDRXX/pipeline_settings.ini <==
[bcl2fastq]
--use-bases-mask: Y145n,I8Y9,I8,Y145n
--mask-short-adapter-reads: 1

This will be supported in production from release 1.4.x, but the pipeline_settings.ini will need to be added
manually per run. Note it is possible to have per-lane settings if need be.
