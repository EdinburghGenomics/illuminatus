Javier is interested in having a pre-demux stage after both index reads are complete,
to check the sample sheet.

What do I need to make this work?

1) The trigger for the WellDups scanning is currently right after read 1 completes, but I have a note in
   RunStatus.py that it could happen after the index reads, and some commented code to do it

Activated this code

2) The Snakefile.welldups is run by the driver. Rename it to Snakefile.read1qc and have it also do the
   test demultiplex so the two can run in parallel. I could run the demux first but well dups scanning
   is fast so that's OK. It simplifies the code not having to fire an alert in the middle of all the
   QC - alerts happen at the end.

Done but tests are failing... fixed!

3) Within this, we need a task that prepares a sample sheet, adds the appropriate settings to run
   something like:

   bcl2fastq -R 211216_A00291_0407_BHV2GYDRXY -o . --sample-sheet Samplesheet.lane1.csv --tiles 's_[1]_2101'  --ignore-missing-bcls
   (no --ignore-missing-bcls is jank and produces weird output - see below!)

   By fiddling with the basemask it should be possible to minimize the amount of fastq.gz files created, as we only need the
   Stats.json contents. Can I emit no data at all? (No, but I can emit very little)

   Also can I be sure that all runs have a 2101 tile? Not sure. Slimmed runs have only one tile period. Fortunately I already
   have the hacky logic calculating TILE_MATCH so use that as my basis.

   bcl2fastq command is:

   /lustre-gseg/software/bcl2fastq/bcl2fastq_v2.20.0.422/bcl2fastq -R 220113_A00291_0410_AHV23HDRXY -o . --sample-sheet Samplesheet.lane1.csv --tiles 's_[1]_2101' --use-bases-mask 'Yn*,I8,I8,n*' --interop-dir . --minimum-trimmed-read-length 1

    I'll need to generate the --tiles and --use-bases-mask depending on the run.

So my plan is to add a --bc_check option to bcl2fastq_setup.py that prepares sample sheets for index checking with the correct
--tiles and --use-bases-mask options.

Done and fixed the tests

4) Incorporate the Stats.json into the interim report. If there are >50% of reads in unassigned then a warning mail
   (ticket reply) should go out, otherwise the % of reads in unassigned should be logged in the RT comment
   actually this is a bit tricky - just leave it in the report

Oh and we can also report the 'barcode_mismatches' at this point, so that info should be incorporated too.
This is a very good reason to keep with using the do_demultiplex.sh script and not call bcl2fastq directly.

Note - do I need to account for mixed projects in a lane? Then the logic would be to tot up the number of reads assigned to
each project and if there are more than that unassigned then warn. I think this is more general so do this.
DONE

Obviously we also need to account for the possibility that a lane may fail to demux for any of the usual reasons.
Yeah but here don't try to diagnose the error, just not the failure and press on.

At the moment, the interim report will have only the overview, so do I want to force per-lane reports to
be made to essentially show the content of Stats.json? But then the numbers will be silly because we're only
doing a single tile, so I need to make it clear that it's only one tile. And I don't want to capture the
"clusters passing filter, according to bcl2fastq" because this will be a silly number.
***** TODO ***** - check what triggers this and carefully check the output when testing.

My solution was to use the "-b" flag to plonk a message at the top of the reports. Note I need to do this on the v3
report as well as the v2 report. Actually, I've just nixed the v3 report as it seems redundant now.

And I want to ensure that the old Stats.json files are not seen by the full QC cos that would make a mess,
so I need to put them in the same location QC/lane1/Stats.json and make sure they are always overwritten.

So a lot to consider here. Hmmm.

I think this is working. **Is it?** Yes, tested on a MiSeq and a NovaSeq run.

5) As before, if read 1 processing fails the pipeline should be able to recover once real processing starts, but unlike
   the well dups scan there is no point trying to re-run this bit. Involves some changes to driver which I can test.

DONE

Also at this point I'd like to kill the old Unassigned Report. Can I just turn this off or what?  I think so.
Note that the Unassigned Barcodes heading is currently appearing on the overview which it should not be doing. Ick. Why?

Oh - cack coding in multiqc_edgen/modules/edgen_unassigned/edgen_unassigned.py. These modules should 'raise UserWarning' if
they have nothing to add. Pay attention TIM! Now I also want to add a line saying that the counts are generated by bcl2fastq
and are approximate. I can leave in the legacy report code here and just disable the code in the Snakefile.
- DONE and DONE

----

Right, on 11th March I seem to have all the Snakefile and driver stuff behaving. Next step is to make MultiQC generate a
lane report (not just an overview) and then look to see if any misleading numbers appear on that report (because we've
only done one tile) and how we can correct/label them.

DONE - with "-b" label.

So firstly, how do I trigger the per-lane reports? I modified the Snakefile to make the report, but the link on the overview
is still greyed out. And there's no indication the numbers are for 1 tile. And there's no Lane Summary in the overview.

Fixed all this - providing the extra .yaml files is enough. And the lane summary missing was a bug, so I trapped the error better.

Also no pipeline version in the report.
OK, much to do. On it next week.

Yep, all of that fixed now. Pipeline version is always shown - current version prior to demus and then historic version.

---

So (15th Mar) we now have a MultiQC report being generated after the read1 processing. So how do we emphasise that this is
only for one tile? My first thought is to pass a parameter to MultiQC, and use that to add a message. This would entail
editing my MultiQc_EdGen plugin but that's OK.

No need! The "-b" flag does what I need here.

Note to self -
multiqc is called from Snakefile.qc which is called from "run_multiqc" in driver.sh. I can poke in the label from driver.sh
and pass it to Snakemake when it runs multiqc_main. As a parameter.

---

On 29/4 - https://egcloud.bio.ed.ac.uk/illuminatus/220428_A00291_0434_BH5VFFDRX2/v/0002/multiqc_report_overview.html
has the links to lanes 1 and 2 (the tabs) disabled. Why? The files are there. Let's remind myself how it decides whether
to enable to the tabs...

in MultiQC_EdGen/multiqc_edgen/multiqc_edgen.py the test is:

if (not self.lane) and (not 'post_demux_info' in self.yaml_data):

And self.yaml_data comes from all of the run_info.*.yml files. In the case of this run:

ls /lustre-gseg/fastqdata/220428_A00291_0434_BH5VFFDRX2/QC/overview/run_info.*.yml

The "2.yml" file is missing. But I think it should be there. Why not? What should write it?

The rule "make_bc_summary" is responsible for making this file. It seems the rule isn't running. Why not?
Driver requests "bc_main", and this depends on 'QC/bc_check/bc_check.msg'. Is the file there for this run?
No.

Oh, the demultiplex failed. The Sample Sheet was empty. That explains it. The reports for lane 1 and lane 2
do exist but they just have some interop metrics on there. In the case where there are actual numbers of reads
to look at, the links are active.

OK, so there is not actually a problem. Fine, I'll leave it as it is.
