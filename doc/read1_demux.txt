Javier is interested in having a pre-demux stage after both index reads are complete,
to check the sample sheet.

What do I need to make this work?

1) The trigger for the WellDups scanning is currently right after read 1 completes, but I have a note in
   RunStatus.py that it could happen after the index reads, and some commented code to do it

Activated

2) The Snakefile.welldups is run by the driver. Rename it to Snakefile.read1 and have it also do the
   test demultiplex so the two can run in parallel. I could run the demux first but well dups scanning
   is fast so that's OK. It simplifies the code not having to fire an alert in the middle of all the
   QC - alerts happen at the end.

Done but tests are failing... fixed!

3) Within this, we need a task that prepares a sample sheet, adds the appropriate settings to run
   something like:

   bcl2fastq -R 211216_A00291_0407_BHV2GYDRXY -o . --sample-sheet Samplesheet.lane1.csv --tiles 's_[1]_2101'  --ignore-missing-bcls
   (no --ignore-missing-bcls is jank and produces weird output - see below!)

   By fiddling with the basemask it should be possible to minimize the amount of fastq.gz files created, as we only need the
   Stats.json contents. Can I emit no data at all?

   Also can I be sure that all runs have a 2101 tile? Not sure. Slimmed runs have only one tile period. Fortunately I already
   have the hacky logic calculating TILE_MATCH so use that as my basis.

   bcl2fastq command is:

   /lustre-gseg/software/bcl2fastq/bcl2fastq_v2.20.0.422/bcl2fastq -R 220113_A00291_0410_AHV23HDRXY -o . --sample-sheet Samplesheet.lane1.csv --tiles 's_[1]_2101' --use-bases-mask 'Yn*,I8,I8,n*' --interop-dir . --minimum-trimmed-read-length 1

    I'll need to generate the --tiles and --use-bases-mask depending on the run.

So my plan is to add a --bc_check option to bcl2fastq_setup.py that prepares sample sheets for index checking with the correct
--tiles and --use-bases-mask options.

Done and fixed the tests

4) Incorporate the Stats.json into the interim report. If there are >50% of reads in unassigned then a warning mail
   (ticket reply) should go out, otherwise the % of reads in unassigned should be logged in the RT comment

Oh and we can also report the 'barcode_mismatches' at this point, so that info should be incorporated too.
This is a very good reason to keep with using the do_demultiplex.sh script and not call bcl2fastq directly.

Note - do I need to account for mixed projects in a lane? Then the logic would be to tot up the number of reads assigned to
each project and if there are more than that unassigned then warn. I think this is more general so do this.

Obviously we also need to account for the possibility that a lane may fail to demux for any of the usual reasons.

At the moment, the interim report will have only the overview, so do I want to force per-lane reports to
be made to essentially show the content of Stats.json? But then the numbers will be silly because we're only
doing a single tile, so I need to make it clear that it's only one tile. And I don't want to capture the
"clusters passing filter, according to bcl2fastq" because this will be a silly number.

And I want to ensure that the old Stats.json files are not seen by the full QC cos that would make a mess,
so I need to put them in the same location QC/lane1/Stats.json.

So a lot to consider here. Hmmm.

5) As before, if read 1 processing fails the pipeline should be able to recover once real processing starts, but unlike
   the well dups scan there is no point trying to re-run this bit. Involves some changes to driver which I can test.

Also at this point I'd like to kill the old Unassigned Report. Can I just turn this off or what?  I think so.
Note that the Unassigned Barcodes heading is currently appearing on the overview which it should not be doing. Ick. Why?

Oh - cack coding in multiqc_edgen/modules/edgen_unassigned/edgen_unassigned.py. These modules should 'raise UserWarning' if
they have nothing to add. Pay attention TIM! Now I also want to add a line saying that the counts are generated by bcl2fastq
and are approximate. I can leave in the legacy report code here and just disable the code in the Snakefile.
- done and done
