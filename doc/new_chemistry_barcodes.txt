In a reply to RT #13340 I wrote:

On a related note it appears that with sequencing chemistry 1.5 all of our sample sheets will be wrong as the i5 barcode needs to be reverse complemented. So I guess I need to modify the sample sheet generator in the LIMS accordingly? The same logic is already there for the HiSeq 4000.

A run with the new chemistry is: 201125_A00291_0321_AHWHKYDRXX, https://rt.genomics.ed.ac.uk/Ticket/Display.html?id=13400

And in 201125_A00291_0321_AHWHKYDRXX/pipeline/SampleSheet.csv.OVERRIDE is a shell one-liner to munge the sample sheet.

A suggestion is that we should record the sequencing chemistry in the LIMS and generate a different sample sheet depending on
the chemistry setting. Of course, in a few months everything will be 1.5.

Another suggestion is that I could munge the sample sheet in Illuminatus. The advantage here is:

1) One sample sheet format for MiSeq + Chem 1.0 + Chem 1.5
2) No setting in the LIMS to cock up
3) No messing with the SSG code (shudder)

The disadvantages are:

1) Barcodes in the unassigned will not match what is seen on the sample sheet

...but I can easily report the sample sheet fragment that was actually used per the lane.

So the question is, can I spot a 1.5 chem run by the metadata?? Yes I think I can:

201203_A00291_0324_AHVTGKDMXX/RunParameters.xml:    <SbsConsumableVersion>3</SbsConsumableVersion>
201214_A00291_0325_AHW2YFDRXX/RunParameters.xml:    <SbsConsumableVersion>1</SbsConsumableVersion>

Older runs have no <SbsConsumableVersion> at all, newer ones have 1 or 3. So I can spot this and use it
to set the operation to be run. Super.

OK, so currently the sample sheet is filtered by some logic baked into the script generated by
BCL2FASTQPreprocessor.py and the filtering is done on-the-fly. What I'd want is to generate the
sample sheet as a file in the output directory.

If I do this with a Snakemake rule then it may not get replaced? Well, 1 it needs to depend on the
sample sheet and 2 the cleanup process should delete it anyway (check it does).

So I need:

1) A filter_samplesheet.py that takes a lane and a revcomp (1,2,12) flag and does the magic.
    Actually no this just wants to be a rewrite of BCL2FASTQPreprocessor.py that outputs both files.
2) Rule in snakemake now outputs config and SampleSheet not the script.
3) Make the preprocessor a little more coherent:
    bcl2fastq will always be the toolbox version at the point of running do_demultiplex.sh
    bcl2fastq.opts will still contain the barcode-mismatches setting
    bcl2fastq.preset.opts will replace {{ bcl2fastq_opts }} in the script (no, see below)
    SampleSheet.filtered.csv will be the sample sheet

Ah, no, let's put the bcl2fastq.preset.opts into the sample sheet. That way we have a complete config
for the run in one place. Yeah. Cool.

So on 20/1/21 I've done this. We no longer have a Python script that generates a shell script and we no longer
have the input to bcl2fastq being read from a pipe with no direct record of exactly what was run. And there
is unit test coverage. All good.

So now, fix the Snakefile.demux and get testing on some slimmed runs. I need to make sure:

1) Sample sheet fragment is removed by bcl2fastqcleanup
2) Revcomp setting is reported somehow
3) Erm?

So in terms of reporting the revcomp setting, I think the thing to do is to add this to
RunMetaData.py, so we get a report of the chemistry version. DONE.

---

On 18th March, I'm still getting requests for ad-hoc reverse complementing. I guess I can add this to the
pipeline most simply by having a 'pipeline/index_revcomp' file and if it exists it's fed to --revcomp
flag of bcl2fastq_setup.py.
The option will be recorded in the sample sheet fragment.
